#! /usr/bin/env bash

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i ERR_CODE=$STATE_OK

SOFTWARE_NAME="node.js"
[ -n "$1" ] && NODEJS_BIN="$1" || NODEJS_BIN="$(which node)"

if [ -z "$NODEJS_BIN" ]; then
  ERR_MSG="Could not find local ${SOFTWARE_NAME}!"
  ERR_CODE=$STATE_UNKNOWN
else
  UPSTREAM_VER=$(curl -s http://nodejs.org/download/ | grep 'Current version:' | sed -e 's/<[a-zA-Z\/][^>]*>//g' -e 's/^ *//g' -e 's/ $//g' | cut -d ' ' -f 3 | sed -e 's/^v//')
  LOCAL_VER="$(${NODEJS_BIN} -v 2>/dev/null | sed -e 's/^v//')"

  if [ -z "$LOCAL_VER" ]; then
    ERR_MSG="Could not get local version!"
    ERR_CODE=$STATE_UNKNOWN
  elif [ -z "$UPSTREAM_VER" ]; then
    ERR_MSG="Could not get remote version!"
    ERR_CODE=$STATE_UNKNOWN
  else
    if [ "$LOCAL_VER" != "$UPSTREAM_VER" ]; then
      LOCAL_DIR="$(dirname ${NODEJS_BIN})"
      ERR_MSG="${NODEJS_BIN##$LOCAL_DIR} (${LOCAL_VER})"
      ERR_CODE=$STATE_CRITICAL
    fi
  fi
fi

case $ERR_CODE in
  $STATE_OK)
    echo "OK: all local ${SOFTWARE_NAME} are up to date (${UPSTREAM_VER})"
    ;;
  $STATE_UNKNOWN)
    echo "UNKNOWN: $ERR_MSG"
    ;;
  $STATE_CRITICAL)
    echo "ERROR: Not up to date (${UPSTREAM_VER}): ${ERR_MSG}" | sed 's/, $//'
    ;;
esac

exit $ERR_CODE
