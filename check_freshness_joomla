#! /usr/bin/env bash

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i ERR_CODE=$STATE_OK

declare -a UPSTREAM_VER

SOFTWARE_NAME="Joomla"
SEARCH_DIR="$1"

OLD_IFS="${IFS}"
IFS="
${IFS}"

if [ -z "$SEARCH_DIR" ]; then
  ERR_MSG="No search directory given!"
  ERR_CODE=$STATE_UNKNOWN
else
  UPSTREAM_VER=( $(curl -s http://update.joomla.org/core/list.xml | grep -oP '(?<= version=")[^"]*' | uniq) )

  if [ -z "$UPSTREAM_VER" ]; then
    ERR_MSG="Could not get remote version!"
    ERR_CODE=$STATE_UNKNOWN
  else
#    for file in $(find ${SEARCH_DIR} \( -type d -name '*.bu' -prune \) -o \( -type f -name version.php -print \)); do
    for file in $(find /var/www -type d -name '*.bu' -prune -o \( -path '*/libraries/joomla/*' -o -path '*/libraries/cms/version*' -o -path '*/includes/*' \) -type f -name version.php -print); do
      LOCAL_DIR=$(dirname "$file" | sed -e 's#/libraries/joomla##g' -e 's#/libraries/cms/version##g' -e 's#/includes##g')
      grep -q 'Joomla' "$file" || continue
      if grep -q 'RELEASE' "$file"; then
        LOCAL_VER=$(grep '\$RELEASE' "$file" | cut -d "'" -f 2).$(grep '\$DEV_LEVEL' "$file" | cut -d "'" -f 2)
        LOCAL_MAJ_VER=$(echo "$LOCAL_VER" | cut -d '.' -f 1-2)

        echo "${UPSTREAM_VER[*]}" | grep -q $LOCAL_VER && continue

        UP_VER=$(echo "${UPSTREAM_VER[*]}" | grep $LOCAL_MAJ_VER)
        [ -z $UP_VER ] && UP_VER=$(echo "${UPSTREAM_VER[*]}" | head -n1)

        ERR_CODE=$STATE_CRITICAL
        ERR_MSG="${ERR_MSG}${LOCAL_DIR##$SEARCH_DIR} (${LOCAL_VER} vs. ${UP_VER}), "
      fi
    done
  fi
fi

IFS="${OLD_IFS}"

case $ERR_CODE in
  $STATE_OK)
    echo "OK: all local ${SOFTWARE_NAME} are up to date (${UPSTREAM_VER[*]})"
    ;;
  $STATE_UNKNOWN)
    echo "UNKNOWN: $ERR_MSG"
    ;;
  $STATE_CRITICAL)
    echo "ERROR: Not up to date: ${ERR_MSG}" | sed 's/, $//'
    ;;
esac

exit $ERR_CODE
