#! /usr/bin/env bash

set -e

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3
declare -i STATE_DEPENDENT=4

declare -i ERR_CODE=${STATE_UNKNOWN}
declare ERR_MSG

declare -i PROBLEMS=0

declare -a WHITELIST_IPV4
declare -a WHITELIST_IPV6
declare -a WHITELIST_HTTP

declare CHECK_HTTP="/usr/lib/nagios/plugins/check_http"
declare CHECK_HTTP_OPTS=""

declare -i ret=0

declare WEBSERVER="apache"

for ARG in "$@"; do
  if [[ "$ARG" =~ ^--no-ipv4= ]]; then
    WHITELIST_IPV4+=("${ARG#--no-ipv4=}")
  elif [[ "$ARG" =~ ^--no-ipv6= ]]; then
    WHITELIST_IPV6+=("${ARG#--no-ipv6=}")
  elif [[ "$ARG" =~ ^--allow-all= ]]; then
    WHITELIST_HTTP+=("${ARG#--allow-all=}")
  elif [[ "$ARG" =~ ^--webserver= ]]; then
    WEBSERVER="${ARG#--webserver=}"
  fi
done

if [ "$WEBSERVER" = "lighttpd" ]; then
  DOMAINS="$(lighttpd -p -f /etc/lighttpd/lighttpd.conf | grep '$HTTP\["host"\] == ' | cut -d'"' -f4 | sort -u)"
else
  DOMAINS="$(apache2ctl -S 2>/dev/null | awk '/ namevhost / { print $4 }')"
fi

for DOMAIN in $DOMAINS; do
  for IP_VERSION in 4 6; do
    VERIFY=true
    HTTP_VERIFY=true

    if [ $IP_VERSION -eq 4 ]; then
      for WHITELISTED in "${WHITELIST_IPV4[@]}"; do
        if [ "$WHITELISTED" = "$DOMAIN" ]; then
          VERIFY=false
          break
        fi
      done
    else
      for WHITELISTED in "${WHITELIST_IPV6[@]}"; do
        if [ "$WHITELISTED" = "$DOMAIN" ]; then
          VERIFY=false
          break
        fi
      done
    fi

    if $VERIFY; then
      for WHITELISTED in "${WHITELIST_HTTP[@]}"; do
        if [ "$WHITELISTED" = "$DOMAIN" ]; then
          HTTP_VERIFY=false
          break
        fi
      done

      if $HTTP_VERIFY; then
        set +e
        DOM_MSG="$(${CHECK_HTTP} -${IP_VERSION} ${CHECK_HTTP_OPTS} -H ${DOMAIN})"
        ret=$?
        set -e
      else
        set +e
        DOM_MSG="$(${CHECK_HTTP} -${IP_VERSION} ${CHECK_HTTP_OPTS} -H ${DOMAIN} -e 'HTTP/1.')"
        ret=$?
        set -e
      fi

      if [ ${ret} -eq 0 ]; then
        # no problem
        true
      elif [ ${ret} -eq 1 ]; then
        PROBLEMS=$((${PROBLEMS}+1))
        [ -n "${DOM_MSG}" ] && ERR_MSG="${ERR_MSG}\n${DOMAIN} (IPv${IP_VERSION}): ${DOM_MSG}"
        if [ ${ERR_CODE} -eq 0 ]; then
          ERR_CODE=${ret}
        elif [ ${ERR_CODE} -gt 2 ]; then
          ERR_CODE=${ret}
        fi
      elif [ ${ret} -eq 2 ]; then
        PROBLEMS=$((${PROBLEMS}+1))
        [ -n "${DOM_MSG}" ] && ERR_MSG="${ERR_MSG}\n${DOMAIN} (IPv${IP_VERSION}): ${DOM_MSG}"
        ERR_CODE=${ret}
      elif [ ${ret} -eq 3 ]; then
        PROBLEMS=$((${PROBLEMS}+1))
        [ -n "${DOM_MSG}" ] && ERR_MSG="${ERR_MSG}\n${DOMAIN} (IPv${IP_VERSION}): ${DOM_MSG}"
        if [ ${ERR_CODE} -eq 0 ]; then
          ERR_CODE=${ret}
        fi
      elif [ ${ret} -eq 4 ]; then
        PROBLEMS=$((${PROBLEMS}+1))
        [ -n "${DOM_MSG}" ] && ERR_MSG="${ERR_MSG}\n${DOMAIN} (IPv${IP_VERSION}): ${DOM_MSG}"
        if [ ${ERR_CODE} -eq 0 ]; then
          ERR_CODE=${ret}
        fi
      else
        PROBLEMS=$((${PROBLEMS}+1))
        ERR_MSG="${ERR_MSG}\nGot unknown return value ${ret} for domain ${DOMAIN}"
        [ -n "${DOM_MSG}" ] && ERR_MSG="${ERR_MSG}\n${DOMAIN} (IPv${IP_VERSION}): ${DOM_MSG}"
      fi
    fi
  done
done

if [ ${PROBLEMS} -eq 0 ]; then
  ERR_CODE=${STATE_OK}
fi

ERR_MSG="Found ${PROBLEMS} problems${ERR_MSG}"
echo -e ${ERR_MSG}
exit ${ERR_CODE}
