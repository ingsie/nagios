#! /usr/bin/env bash
# 2014, Moritz Kaspar Rudert (mortzu) <mr@planetcyborg.de>.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this list of
#   conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this list
#   of conditions and the following disclaimer in the documentation and/or other materials
#   provided with the distribution.
#
# * The names of its contributors may not be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# * Feel free to send Club Mate to support the work.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
# AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

PATH=/sbin:/usr/sbin:/bin:/usr/bin

declare -i NO_VERIFY=0

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i WARNING_LIMIT=1209600
declare -i CRITICAL_LIMIT=86400

declare -i ERR_CODE=$STATE_OK

declare -a VERIFY_WHITELIST

JABBER_SERVER="$(hostname -f)"

for ARG in "$@"; do
  if [[ "$ARG" =~ ^--no-verify= ]]; then
    VERIFY_WHITELIST+=("${ARG#--no-verify=}")
  elif [[ "$ARG" =~ ^--no-verify$ ]]; then
    NO_VERIFY=1
    break
  fi
done

if ! which openssl >/dev/null 2>&1; then
  ERR_MSG="OpenSSL not found!"
  ERR_CODE=$STATE_UNKNOWN
else
  DOMAINS="$(grep 'VirtualHost "' /etc/prosody/prosody.cfg.lua | cut -d'"' -f2)"
  ERR_MSG=""

  for DOMAIN in $DOMAINS; do
    DOM_MSG=""
    TMP_FILE="$(mktemp --tmpdir check_cert.XXXXXXXXXX)"

    VERIFIED="$(openssl s_client -connect "$JABBER_SERVER":5222 -starttls xmpp -xmpphost "$DOMAIN" -CApath /etc/ssl/certs < /dev/null 2>/dev/null | \
      awk '
      BEGIN {cert=0}
      /^ *Verify return code:/ { print > "/dev/stderr" }
      /^-----BEGIN CERTIFICATE-----$/ { cert=1 }
      { if(cert==1) print }
      /^-----END CERTIFICATE-----$/ { cert=0 } ' 3>&1 1>"$TMP_FILE" 2>&3)"

    SSL_CHECK_OUTPUT="$(openssl x509 -enddate -noout < "$TMP_FILE")"

    if ! openssl x509 -checkend $CRITICAL_LIMIT -noout < "$TMP_FILE" ; then
      ERR_CODE=$STATE_CRITICAL

      DOM_MSG="$SSL_CHECK_OUTPUT"
    elif ! openssl x509 -checkend $WARNING_LIMIT -noout < "$TMP_FILE" ; then
      if [ $ERR_CODE -ne $STATE_CRITICAL ]; then
        ERR_CODE=$STATE_WARNING
      fi

      DOM_MSG="$SSL_CHECK_OUTPUT"
    fi

    if [ "${VERIFIED##*Verify return code: }" != "0 (ok)" ] && [ $NO_VERIFY -ne 1 ]; then
      VERIFY=true
      for WHITELISTED in "${VERIFY_WHITELIST[@]}"; do
        if [ "$WHITELISTED" = "$DOMAIN" ]; then
          VERIFY=false
          break
        fi
      done
      if $VERIFY; then
        if [ -n "${DOM_MSG}" ]; then
          DOM_MSG="${DOM_MSG} - "
        fi

        DOM_MSG="${DOM_MSG}unable to verify: ${VERIFIED##*Verify return code: }"

        if [ $ERR_CODE -ne $STATE_CRITICAL ]; then
          ERR_CODE=$STATE_WARNING
        fi
      fi
    fi

    if [ -n "$DOM_MSG" ]; then
      ERR_MSG="${ERR_MSG}${DOMAIN}: ${DOM_MSG}, "
    fi

    rm -f "$TMP_FILE"
  done
fi

case $ERR_CODE in
  $STATE_OK)
    echo "OK: all local certificates are fresh"
    ;;
  $STATE_UNKNOWN)
    echo "UNKNOWN: $ERR_MSG"
    ;;
  $STATE_WARNING)
    echo "WARNING: $ERR_MSG" | sed 's/, $//'
    ;;
  $STATE_CRITICAL)
    echo "ERROR: $ERR_MSG" | sed 's/, $//'
    ;;
esac

exit $ERR_CODE
