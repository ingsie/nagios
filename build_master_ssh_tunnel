#! /usr/bin/env sh

# Copyright (c) 2013 Jan-Philipp "jplitza" Litza <janphilipp@litza.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i ERR_CODE=$STATE_OK

HOSTNAME="$1"
PORT="$2"
CONFIG="/etc/icinga/ssh_config"
SOCKET="/var/run/icinga/ssh@${HOSTNAME}:${PORT}.sock"
KEY="/etc/icinga/nagios_sshkey"

if [ $# -lt 2 ]; then
  echo "usage: $(basename "$0") <host> <port>"
  exit
fi

if [ -S "${SOCKET}" ]; then
  ERR_MSG="OK - Tunnel exists"
  ERR_CODE=$STATE_OK
elif [ ! -f "${KEY}" ]; then
  ERR_MSG="CRITICAL - keyfile missing: ${KEY}"
  ERR_CODE=$STATE_CRITICAL
elif [ ! -d "$(dirname "${SOCKET}")" ]; then
  ERR_MSG="CRITICAL - socket directory missing: $(dirname "${SOCKET}")"
  ERR_CODE=$STATE_CRITICAL
else
  # start ssh with all file descriptors closed/nulled so that the check doesn't hang
  /usr/bin/ssh -nNMf -p "${PORT}" -i "${KEY}" -F "${CONFIG}" "${HOSTNAME}" >/dev/null 2>&1 3>&- 4>&- 5>&- 6>&-
  if [ $? -ne 0 ] ; then
    ERR_MSG="CRITICAL - Tunnel creation failed"
    ERR_CODE=$STATE_CRITICAL
  else
    ERR_MSG="OK - Tunnel established"
    ERR_CODE=$STATE_OK
  fi
fi

echo "$ERR_MSG"
exit $ERR_CODE
