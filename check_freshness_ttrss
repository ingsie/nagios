#! /usr/bin/env bash
# 2014, Moritz Kaspar Rudert (mortzu) <mr@planetcyborg.de>.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this list of
#   conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this list
#   of conditions and the following disclaimer in the documentation and/or other materials
#   provided with the distribution.
#
# * The names of its contributors may not be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# * Feel free to send Club Mate to support the work.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS
# AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

PATH=/sbin:/usr/sbin:/bin:/usr/bin

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i ERR_CODE=$STATE_OK

SOFTWARE_NAME="Tiny Tiny RSS"
SEARCH_DIR="$1"

OLD_IFS="$IFS"
IFS=$'\n'

if [ -z "$SEARCH_DIR" ]; then
  ERR_MSG="No search directory given!"
  ERR_CODE=$STATE_UNKNOWN
else
  UPSTREAM_VER=$(curl -f http://tt-rss.org/version.php 2>/dev/null | python -c "import json; import sys; data=json.load(sys.stdin); print data['version']" 2>/dev/null)

  if [ -z "$UPSTREAM_VER" ]; then
    ERR_MSG="Could not get remote version!"
    ERR_CODE=$STATE_UNKNOWN
  else
    for file in $(find ${SEARCH_DIR} \( -type d -name '*.bu' -prune \) -o \( -type f -name functions.php -print \)); do
      LOCAL_DIR=$(dirname "$file" | sed 's#/include##g')
      if grep -q 'http://tt-rss.org/version.php' "$file" || grep -q 'http://tt-rss.org/releases.rss' "$file"; then
        dirname "$file" | grep -q '\.bu' && continue
        LOCAL_VER=$(grep "define('VERSION" "${LOCAL_DIR}/include/version.php" 2>/dev/null | head -n1 | cut -d "'" -f 4)
        LOCAL_VER2=$(grep "define('VERSION" "${LOCAL_DIR}/version.php" 2>/dev/null | head -n1 | cut -d '"' -f 2)
        [ -z "$LOCAL_VER" ] && [ -z "$LOCAL_VER2" ] && continue || [ -z "$LOCAL_VER" ] && LOCAL_VER=$LOCAL_VER2
        if [ "$LOCAL_VER" != "$UPSTREAM_VER" ]; then
          ERR_CODE=$STATE_CRITICAL
          ERR_MSG="${ERR_MSG}${LOCAL_DIR##$SEARCH_DIR} (${LOCAL_VER}), "
        fi
      fi
    done
  fi
fi

IFS="$OLD_IFS"

case $ERR_CODE in
  $STATE_OK)
    echo "OK: all local ${SOFTWARE_NAME} are up to date (${UPSTREAM_VER})"
  ;;
  $STATE_UNKNOWN)
    echo "UNKNOWN: $ERR_MSG"
  ;;
  $STATE_CRITICAL)
    echo "ERROR: Not up to date (${UPSTREAM_VER}): ${ERR_MSG}" | sed 's/, $//'
  ;;
esac

exit $ERR_CODE
