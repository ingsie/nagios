#! /usr/bin/env bash

# Copyright (c) 2013 Jan-Philipp "jplitza" Litza <janphilipp@litza.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

declare -i STATE_OK=0
declare -i STATE_WARNING=1
declare -i STATE_CRITICAL=2
declare -i STATE_UNKNOWN=3

declare -i ERR_CODE=$STATE_OK

ERR_MSG=''

BACKUP_DIR="$1"
WARN_AGE="$2"
CRIT_AGE="$3"
MAXDEPTH="$4"

usage() {
  cat <<EOF
Usage: $(basename $0) <dir> <warn> <crit> [<maxdepth>]

<dir> is the directory to look in for backups
<warn> is the maximum age of the newest backup before the state is warning
<crit> is the maximum age of the newest backup before the state is critical
<maxdepth> is the maximum search depth and optional (but very recommended for
           file backups)
EOF
}

if [ $# -lt 3 ]; then
  usage
  exit $STATE_UNKNOWN
elif ! [ -e "$BACKUP_DIR" ]; then
  echo "${BACKUP_DIR} does not exist!"
  usage
  exit $STATE_UNKNOWN
elif [ "$WARN_AGE" -gt "$CRIT_AGE" ]; then
  echo "Warning age ${WARN_AGE} is greater than critical age ${CRIT_AGE}!"
  usage
  exit $STATE_UNKNOWN
elif [ "$WARN_AGE" -eq 0 ]; then
  echo "Warning age is 0! That doesn't make sense, you know..."
  usage
  exit $STATE_UNKNOWN
elif [ "$CRIT_AGE" -eq 0 ]; then
  echo "Critical age is 0! That doesn't make sense, you know..."
  usage
  exit $STATE_UNKNOWN
fi

has_files() {
  find "$1" ${MAXDEPTH:+-maxdepth $MAXDEPTH} -mtime "-$2" -printf '#' | grep '#' > /dev/null
}

for DIR in ${BACKUP_DIR}/*; do
  # Skip lost+found
  if [ "$(basename $DIR)" = 'lost+found' -o ! -d "$DIR" ]; then
    continue
  fi

  if ! has_files "$DIR" "$CRIT_AGE"; then
    ERR_MSG="${ERR_MSG}$(basename $DIR) "
    if [ $ERR_CODE -lt 1 ]; then
      ERR_CODE=$STATE_CRITICAL
    fi
  elif ! has_files "$DIR" "$WARN_AGE"; then
    ERR_MSG="${ERR_MSG}$(basename $DIR) "
    if [ $ERR_CODE -lt $STATE_CRITICAL ]; then
      ERR_CODE=$STATE_WARNING
    fi
  fi
done

case $ERR_CODE in
  $STATE_OK)
    echo "OK: Newest backup not older than ${WARN_AGE} days"
  ;;
  $STATE_UNKNOWN)
    echo "UNKNOWN: ${ERR_MSG}"
  ;;
  $STATE_WARNING)
    echo "WARNING: Newest backup older than ${WARN_AGE} days: ${ERR_MSG}"
  ;;
  $STATE_CRITICAL)
    echo "ERROR: Newest backup older than ${CRIT_AGE} days: ${ERR_MSG}"
  ;;
esac

exit $ERR_CODE
